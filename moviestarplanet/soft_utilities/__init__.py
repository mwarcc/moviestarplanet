import aiohttp, atexit, json
from typing import Any, Dict
from moviestarplanet.entities import MSP2ItemTemplate

class SoftUtils:
    def __init__(self, access_token: str) -> None:
        self._session = aiohttp.ClientSession()
        self.access_token: str = access_token
        atexit.register(self.close_session)

    async def close_session(self):
        """
        Close the aiohttp session when the program exits.
        """
        if getattr(self, '_session', None) is not None:
            await self._session.close()   

    async def inventory_json_for_item_template_async(self, itemId: int) -> Dict[str, Any]:
        """
        Fetches JSON data for a specific item template asynchronously from the inventory.

        Args:
            itemId (int): The ID of the item template to fetch.

        Returns:
            Dict[str, Any]: A dictionary containing the fetched JSON data.
        """
        async with self._session.get(f"https://eu.mspapis.com/curatedcontentitemtemplates/v2/item-templates/{str(itemId)}", headers={"authorization": f"Bearer {self.access_token}"}) as response:
            data = await response.json()
            return {
                "id": "lmao", "itemId": str(itemId), "objectId": str(itemId),
                "itemSource": "curatedcontentitemtemplates", "objectSource": "curatedcontentitemtemplates",
                "metadata": data.get("metadata"), "tags": data.get("tags"),
                "additionalData": data.get("additionalData")
            }
        
    def apply_color_to_item(self, data: dict, colors: str) -> dict:
        """
        Apply color to the item data.

        Args:
            data (dict): The item data dictionary generated by inventory_json_for_item_template_async.
            colors (str): The color value to be added.

        Returns:
            dict: The updated item data dictionary.
        """
        if data.get('additionalData', {}).get('NebulaData'):
            data['additionalData']['NebulaData']['Colors'] = colors
        else:
            data['additionalData'] = {
                'NebulaData': {'Colors': colors}
            }
        return data
    
    async def get_item_templates(self, itemId: int) -> MSP2ItemTemplate:
        """
        Retrieves an MSP2ItemTemplate object from the API.

        Args:
            objId (int): Object ID.

        Returns:
            MSP2ItemTemplate: MSP2ItemTemplate object.
        """
        async with self._session.get(f"https://eu.mspapis.com/curatedcontentitemtemplates/v2/item-templates/{str(itemId)}", headers={"authorization": f"Bearer {self.access_token}"}) as response:
            data = await response.json()
            return MSP2ItemTemplate(**{key: data.get(key) for key in MSP2ItemTemplate.__init__.__code__.co_varnames if key in data})
